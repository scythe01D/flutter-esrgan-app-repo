

import 'dart:io';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

import 'package:flutter_esrgan_app/authentication/authentication.dart';
import 'package:flutter_esrgan_app/pages/enhance.dart';
import 'package:flutter_esrgan_app/pages/gallery.dart';
//import 'package:flutter_esrgan_app/pages/image_view.dart';
import 'package:flutter_esrgan_app/pages/profile_page.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import '../widgets/scaler.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:google_sign_in/google_sign_in.dart';

class HomePage extends StatefulWidget {
  const HomePage({Key? key, required User user})
      : _user = user,
        super(key: key);

  final User _user;

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final filename = 'file.txt';
  final orgfilename = 'file.txt';
  late User _user;
  @override
  void initState() {
    _user = widget._user;
    createUserInFireStore();
    // TODO: implement initState
    super.initState();
  }

  final _scaffoldKey = GlobalKey<ScaffoldState>();

  PageController pageController = PageController(initialPage: 0);
  int pageIndex = 0;

  @override
  Widget build(BuildContext context) {
    ScreenScaler scaler = new ScreenScaler()..init(context);
    return buildAuthScreen();
  }

  onPageChanged(int pageIndex) {
    setState(() {
      this.pageIndex = pageIndex;
      //loadMarkerFeed();
    });
  }

  onTap(int pageIndex) {
    pageController.animateToPage(
      pageIndex,
      duration: Duration(milliseconds: 1),
      curve: Curves.linear,
    );
  }
final File image =Image.file("assets/images/hr_esrganjpg" ) ;
  
  Scaffold buildAuthScreen() {
    ScreenScaler scaler = ScreenScaler()..init(context);
    return Scaffold(
      key: _scaffoldKey,
      body: PageView(
        children: <Widget>[
          GalleryPage(),
          EnhancePage(),
          ProfilePage(
            user: _user,
          ),
          ImageView(image:,orgImage: File(""))
        ],
        controller: pageController,
        onPageChanged: onPageChanged,
        physics: NeverScrollableScrollPhysics(),
      ),
      bottomNavigationBar: BottomNavigationBar(
          currentIndex: pageIndex,
          onTap: onTap,
          selectedItemColor: Colors.blue,
          showUnselectedLabels: true,
          type: BottomNavigationBarType.fixed,
          unselectedItemColor: Colors.grey[400],
          selectedFontSize: scaler.getTextSize(8),
          unselectedFontSize: scaler.getTextSize(8),
          items: [
            BottomNavigationBarItem(
              icon: FaIcon(FontAwesomeIcons.images),
              label: ('Gallery'),
            ),
            BottomNavigationBarItem(
              icon: FaIcon(FontAwesomeIcons.magic),
              label: ('Enhance'),
            ),
            BottomNavigationBarItem(
              icon: FaIcon(FontAwesomeIcons.user),
              label: ('Profile'),
            ),
            BottomNavigationBarItem(
              icon: FaIcon(FontAwesomeIcons.photoVideo),
              label: ('Image View'),
            )
          ]),
    );
  }

  createUserInFireStore() async {
    //final GoogleSignInAccount? user = googleSignIn.currentUser;
    DocumentSnapshot doc = await usersRef
        .doc(_user.uid)
        .get(); // get the user.id of the google account
    // if an email currently has no given username, then go to CreatePage()
    if (!doc.exists) {
      // obtain the following datails from the google account
      usersRef.doc(_user.uid).set({
        "id": _user.uid,
        "photoUrl": _user.photoURL,
        "email": _user.email,
        "displayName": _user.displayName,
        //"timestamp": timestamp,
        //"token": tokens
        //"token": _messaging.getToken()
      });

      //tokensRef.document(user.id).setData({"id": user.id, "token": tokens});

      // doc = await usersRef.document(user.id).get();
    }
    //currentUser = User.fromDocument(doc);
  }
}
